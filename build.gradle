buildDir 'installed'
allprojects { version '5.2' }

subprojects {
    repositories {
        jcenter()
        ivy {
            url 'http://mary.dfki.de/repo'
            layout 'maven'
        }
    }
}

project(':install').task('*', description: 'Install all available voices (Caution: this will take a long time!)')
new groovy.json.JsonSlurper().parse(file('components.json')).each { voice ->
    project(":$voice.name") {
        configurations.create 'marytts'

        voice.files.keySet().each { name ->
            def dependency = "$voice.group:$voice.artifact:$voice.version"
            if (name.endsWith('.zip')) {
                dependency += ":data@zip"
            }
            dependencies.marytts dependency
        }

        configurations.marytts.resolutionStrategy.eachDependency {
            if (it.requested.group == 'de.dfki.mary' && it.requested.name.startsWith('marytts-')) {
                it.useVersion version
            }
        }

        task info(group: 'Help', description: "Display details") << {
            println "Gender\t$voice.gender"
            println "Language\t$voice.language"
            println "Type\t$voice.type"
            println "Download size\t${voice.files.values().sum { it.size }}"
            println "License\t$voice.license.name, see $voice.license.url"
            println "Description\t$voice.description"
        }

        task payload(type: Copy) {
            from configurations.marytts
            into rootProject.buildDir
            outputs.upToDateWhen { false }
            ext.files = [:]
            eachFile { source ->
                files[source.file] = source.name.endsWith('.zip') ?
                        new java.util.zip.ZipFile(source.file).entries().collect {
                            new File(destinationDir, it.name)
                        } : [new File(destinationDir, source.name)]
                source.exclude()
            }
        }

        task verify(dependsOn: payload, description: "Verify SHA-1 checksum of downloaded files for $voice.name") << {
            payload.files.keySet().each {
                if (voice.files[it.name]) {
                    def expected = voice.files[it.name].sha1
                    def actual = it.parentFile.name.padLeft(40, '0')
                    logger.lifecycle "Verify\t$it.name"
                    assert expected == actual: "Checksum failed for $it.name"
                }
            }
        }
        verify.outputs.upToDateWhen { gradle.taskGraph.hasTask(install) }

        task install(dependsOn: rootProject.hasProperty('noverify') ? payload : verify, description: voice.description) << {
            payload.files.keySet().each { source ->
                if (source.name.endsWith('.zip')) {
                    copy {
                        from zipTree(source)
                        into rootProject.buildDir
                        eachFile {
                            def target = new File(rootProject.buildDir, it.path)
                            if (!target.exists() || rootProject.hasProperty('force')) {
                                logger.lifecycle "Unpack\t$it.name"
                            } else {
                                it.exclude()
                            }
                        }
                    }
                } else {
                    def target = new File(rootProject.buildDir, source.name)
                    if (!target.exists() || rootProject.hasProperty('force')) {
                        logger.lifecycle "Copy\t$source.name"
                        copy {
                            from source
                            into rootProject.buildDir
                        }
                    }
                }
            }
        }

        task uninstall(dependsOn: payload, description: "Remove the files for $voice.name from \"$rootProject.buildDir.name\" directory") << {
            payload.files.each { source, targets ->
                targets.each { target ->
                    if (target.isFile() && voice.files.containsKey(source.name)) {
                        logger.lifecycle "Delete\t$target.name"
                        delete target
                    }
                }
            }
        }

        task purge(dependsOn: payload, description: "Remove the files for $voice.name from the download cache (experimental)") << {
            payload.files.keySet().each {
                if (voice.files.containsKey(it.name)) {
                    logger.lifecycle "Delete\t$it"
                    delete it
                }
            }
        }
    }

    project(':install') {
        task(voice.name, dependsOn: ":$voice.name:install", group: 'Install', description: voice.description)
        tasks.getByName('*').dependsOn voice.name
    }
}

task list(group: 'Help', description: 'List all available voices') << {
    project(':install').tasks.grep { it.group == 'Install' }.each { println "$it.name\t$it.description" }
}

task server(type: JavaExec, group: 'Runtime', description: 'Start the MaryTTS server') {
    defaultTasks.add it.name
    if (!buildDir.exists()) {
        dependsOn ':cmu-slt-hsmm:install'
    }
    workingDir buildDir
    main 'marytts.server.Mary'
    systemProperties System.properties
    if (logger.isEnabled(LogLevel.INFO)) {
        systemProperties << ['log4j.logger.marytts': 'INFO,stderr']
    }
    if (logger.isEnabled(LogLevel.DEBUG)) {
        systemProperties << ['log4j.logger.marytts': 'DEBUG,stderr']
    }
    doFirst {
        def jarFiles = buildDir.exists() ? buildDir.listFiles() : null
        assert jarFiles: "No jar files found in \"$buildDir.name\" directory! Please install a MaryTTS voice first"
        classpath jarFiles
    }
}

task stage(dependsOn: ['install:cmu-slt','install:enst-camille','install:bits4'])